// Generated by CoffeeScript 1.10.0
var Categories, Posts, Topics, async, db, privileges, winston;

Posts = require.main.require('./src/posts');

Topics = require.main.require('./src/topics');

Categories = require.main.require('./src/categories');

privileges = require.main.require('./src/privileges');

db = require.main.require('./src/database');

winston = require.main.require('winston');

async = require('async');

(function(Hooks) {
  var createCategory, setCategoryPrivileges;
  Hooks.filter = {};
  Hooks.action = {};
  setCategoryPrivileges = function(category, groupName, callback) {
    return async.waterfall([
      function(next) {
        var removePrivileges;
        removePrivileges = ['topics:create', 'topics:reply', 'posts:edit', 'posts:delete', 'topics:delete', 'upload:post:image'];
        return privileges.categories.rescind(removePrivileges, category.cid, 'registered-users', next);
      }, function(next) {
        var removePrivileges;
        removePrivileges = ['find', 'read', 'topics:read'];
        return privileges.categories.rescind(removePrivileges, category.cid, 'guests', next);
      }, function(next) {
        var defaultPrivileges;
        defaultPrivileges = ['find', 'read', 'topics:read', 'topics:create', 'topics:reply', 'posts:edit', 'posts:delete', 'topics:delete', 'upload:post:image', 'etopic:create', 'hiring:create', 'poll:create'];
        return privileges.categories.give(defaultPrivileges, category.cid, groupName, next);
      }
    ], callback);
  };
  createCategory = function(data, groupName, callback) {
    return Categories.create(data, function(err, category) {
      if (err) {
        return callback(err);
      }
      return setCategoryPrivileges(category, groupName, function(err) {
        return callback(err, category);
      });
    });
  };
  Hooks.filter.groupCreate = function(obj, callback) {
    var cat, data, group;
    group = obj.group, data = obj.data;
    if (!data.isClub) {
      return callback(null, obj);
    }
    cat = null;
    return async.waterfall([
      function(next) {
        return createCategory({
          name: data.name,
          description: data.description,
          groupSlug: group.slug,
          groupName: group.name
        }, data.name, next);
      }, function(_cat, next) {
        var key;
        cat = _cat;
        if (data.password) {
          key = 'group:password';
          return db.setObjectField(key, group.name, data.password, next);
        } else {
          return next(null);
        }
      }
    ], function(err) {
      group.cid = cat.cid;
      group.brief = data.brief || '';
      group.hasPassword = data.hasPassword || !!data.password;
      return callback(err, obj);
    });
  };
  Hooks.filter.categoryCreate = function(obj, callback) {
    var category, data;
    category = obj.category, data = obj.data;
    category.groupSlug = data.groupSlug;
    category.groupName = data.groupName;
    return callback(null, obj);
  };
  return Hooks.action.groupUpdate = function(obj) {
    var name, payload, values;
    name = obj.name, values = obj.values;
    payload = {};
    if (values.hasOwnProperty('brief')) {
      payload.brief = values.brief || '';
    }
    if (values.hasOwnProperty('hasPassword')) {
      payload.hasPassword = !!values.hasPassword;
    }
    return async.parallel([
      function(next) {
        return db.setObject('group:' + name, payload, next);
      }, function(next) {
        var key;
        if (values.password) {
          key = 'group:password';
          return db.setObjectField(key, name, values.password, next);
        } else {
          return next(null);
        }
      }
    ], function(err) {
      if (err) {
        return winston.error(err);
      }
    });
  };
})(exports);
