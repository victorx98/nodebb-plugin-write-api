// Generated by CoffeeScript 1.10.0
var Categories, Posts, Topics, async, privileges;

Posts = require.main.require('./src/posts');

Topics = require.main.require('./src/topics');

Categories = require.main.require('./src/categories');

privileges = require.main.require('./src/privileges');

async = require('async');

(function(Hooks) {
  var createCategory, setCategoryPrivileges;
  Hooks.filter = {};
  Hooks.action = {};
  setCategoryPrivileges = function(category, groupName, callback) {
    return async.waterfall([
      function(next) {
        var removePrivileges;
        removePrivileges = ['topics:create', 'topics:reply', 'posts:edit', 'posts:delete', 'topics:delete', 'upload:post:image'];
        return privileges.categories.rescind(removePrivileges, category.cid, 'registered-users', next);
      }, function(next) {
        var removePrivileges;
        removePrivileges = ['find', 'read', 'topics:read'];
        return privileges.categories.rescind(removePrivileges, category.cid, 'guests', next);
      }, function(next) {
        var defaultPrivileges;
        defaultPrivileges = ['find', 'read', 'topics:read', 'topics:create', 'topics:reply', 'posts:edit', 'posts:delete', 'topics:delete', 'upload:post:image', 'etopic:create', 'hiring:create', 'poll:create'];
        return privileges.categories.give(defaultPrivileges, category.cid, groupName, next);
      }
    ], callback);
  };
  createCategory = function(data, groupName, callback) {
    return Categories.create(data, function(err, category) {
      if (err) {
        return callback(err);
      }
      return setCategoryPrivileges(category, groupName, function(err) {
        return callback(err, category);
      });
    });
  };
  Hooks.filter.groupCreate = function(obj, callback) {
    var data, filesCat, group, linksCat, parentCat, tweetsCat;
    group = obj.group, data = obj.data;
    if (!data.isClub) {
      return callback(null, obj);
    }
    parentCat = filesCat = linksCat = tweetsCat = null;
    return async.waterfall([
      function(next) {
        return createCategory({
          name: data.name,
          description: data.description,
          groupSlug: group.slug
        }, data.name, next);
      }, function(category, next) {
        parentCat = category;
        return async.waterfall([
          function(next) {
            return createCategory({
              name: 'Files',
              isFiles: true,
              parentCid: parentCat.cid,
              groupSlug: group.slug
            }, data.name, next);
          }, function(cat, next) {
            filesCat = cat;
            return createCategory({
              name: 'Links',
              isLinks: true,
              parentCid: parentCat.cid,
              groupSlug: group.slug
            }, data.name, next);
          }, function(cat, next) {
            linksCat = cat;
            return createCategory({
              name: 'Tweets',
              isTweets: true,
              parentCid: parentCat.cid,
              groupSlug: group.slug
            }, data.name, next);
          }
        ], next);
      }
    ], function(err, cat) {
      tweetsCat = cat;
      group.mainCid = parentCat.cid;
      group.filesCid = filesCat.cid;
      group.linksCid = linksCat.cid;
      group.tweetsCid = tweetsCat.cid;
      group.description2 = data.description2;
      return callback(err, obj);
    });
  };
  return Hooks.filter.categoryCreate = function(obj, callback) {
    var category, data;
    category = obj.category, data = obj.data;
    category.isFiles = data.isFiles;
    category.isLinks = data.isLinks;
    category.isTweets = data.isTweets;
    category.groupSlug = data.groupSlug;
    return callback(null, obj);
  };
})(exports);
